function isShowHeader() {
return 1;
}

function getFileName() {
return "/Users/touyou/Project/touyou/p5_play_problem/README.md";
}

function getFileType() {
return "markdown";
}

function getLastModified() {
return "2017/04/26 (水) 14:15:23";
}

function getContent() {
return "# Blueゲーム課題〜オセロをつくろう！〜\n\n![](file://localhost/Users/touyou/Project/touyou/p5_play_problem/res/game_sample.gif)\n\n（※上のサンプル動画は途中変な動きをしますが気にしないでください...答えは修正してあります。普通のオセロが目標になります。）\n\n## 準備\n\nターミナルを開いて\n\n```\n$ git clone git@git.life-is-tech.com:blue/BlueGameExcercise.git\n$ cd BlueGameExcercise\n$ git checkout -b (put your name)\n```\n\nを実行してください。`(put your name)`の部分は自分のメンター名でお願いします。例えば僕の場合は`git checkout -b touyou`となります。  \n答えのコードを見たい場合は、自分のコードの状態を以下のようなコマンドを実行して保存した後\n\n```\n$ git add .\n$ git commit -m '好きなメッセージを入れる'\n```\n\n以下のコマンドを実行すると見れるようになります。\n\n```\n$ git checkout answer\n```\n\n自分の解答に戻りたければ\n\n```\n$ git checkout (put your name)\n```\n\nで戻ることができます。（ここまでの一連の作業はターミナルを閉じずに行うことを想定したものです。一度閉じてしまってうまくいかないという場合は適宜分かる人に聞いてください。）\n\nまたproblemブランチでもgitを上手く使えば答えが見れてしまいますが本質ではないのでやめましょう。\n\n## 注意事項\n### 学べること\n\n- 関数（メソッド）の使い方\n- 二次元配列の使い方\n- 無限ループ\n- 【発展】アルゴリズム\n- 【発展】三項演算子\n \n### フォルダ構成\n\nフォルダ構成はMOZERの新システムに準じています。そのためlesson_snaps/scene_simplest/editorの中にあるsketch_editor.jsを編集するだけで大丈夫です。index.htmlをAtomのプレビューなどで確認しながら進めてください。\n\n### 発展部分に関して\n\n発展部分に関しては必須ではありません。三項演算子はif文を短くしただけのものなのでif文で代用してもらってかまわないですし、アルゴリズム部分に関しても難しいので挑戦したい方あるいはもともとゲームメンターの方は挑戦してみましょう。  \n特にアルゴリズム部分はかなりややこしいので適宜わかる言語でググってみてください。プログラミングに慣れてなくてまったくわからないと言うことであればその場の出来る人に解読してもらってください。\n\n### 対象としている人\n\nザイルが作った恐竜ゲームの課題をクリアした人を対象としています。\n\n## 課題１ 準備編\n### ①画像を読み込んでボードを表示しよう\n\n画像は以下の３つがあります。\n\n|画像のパス|役割|プレビュー|\n|---|---|---|\n|`png/board.png`|ボードの背景画像|![](file://localhost/Users/touyou/Project/touyou/p5_play_problem/lesson_snaps/scene_simplest/png/board.png)|\n|`png/black.png`|黒のコマ|![](file://localhost/Users/touyou/Project/touyou/p5_play_problem/lesson_snaps/scene_simplest/png/black.png)|\n|`png/white.png`|白のコマ|![](file://localhost/Users/touyou/Project/touyou/p5_play_problem/lesson_snaps/scene_simplest/png/white.png)|\n\nこれらを読み込んでキャンバスを作り、背景を描画するところまで進めてください。画像の読み込みは`preload`の中で行うようにしてください。  \nキャンバスのサイズは360×360にするといいです。\n\n### ②必要なグローバル変数を定義しよう\n\nグローバル変数を定義しましょう。今回必要なのは以下のものです。（実装方法によって若干変わるので分かる人は無視してどんどん進めていきましょう。）\n\n- `boardImg`, `whiteImg`, `blackImg` ... 上３つの画像をloadしたものを入れる変数\n- `board` ... 盤面の状態を保存する配列\n- `pieces` ... 盤面のSpriteのためのグループ\n- `turn` ... 今どちらのターンかを示す変数\n- `vec` ... 探索用に進める方向を配列にしたもの（これは無くてもできます）\n\n### ③setup関数を完成させよう\n\nsetupで行うことの内キャンバスの作成はすでに終わっていると思うので、各変数の初期化を行いましょう。`vec`に関してはオプションなので今はやらなくて構いません。またどちらから始めるかというのは人によると思うので白(1)、黒(2)好きな方を設定してください。（`board`の定義と矛盾がないようにだけ注意しましょう。）\n\n#### Lesson: 多次元配列\n\n今回は盤面の状態と探索用のユーティリティ変数配列（というより定数配列？）で多次元配列というものを使います。  \n多次元配列というのは簡単に言うと「入れ子になった配列」です。入れ子とはマトリョーシカのようなものを思い浮かべてください。  \n\n例えば2×2の配列というのはJavaScriptでは以下のように定義します。\n\n```js\nvar array = [[1, 2], [3, 4]];\n```\n\nこうすると以下のように取り出すことができます。\n\n```js\nconsole.log(array[0][0]);  // コンソールに1が表示\nconsole.log(array[1][0]);  // コンソールに3が表示\n```\n\n入れ子にする数によって二次元配列や三次元配列のように呼ばれます。  \n今回は二次元配列を用いて盤面のコマの状態を表したいと思います。中の状態は好き好きですが、正解コードは0をコマがおかれていない状態、1を白、2を黒として定義しています。\n\n## 課題２ 描画編\n### ①`pieces`に盤面の描画しなければならないSpriteを追加しよう\n\n`pieces`に盤面の状態を反映しましょう。必須ではありませんが`resetPieces`という関数（メソッド）を作成してまとめるとよいと思います。また盤面の状態は可変なので毎フレーム削除してから追加しなおすという方式にするとよいと思います。  \nSpriteの位置や大きさなのですが、サイズが90×90になるよう盤面を作成しているので`board[i][j]`のSpriteは`45+90*j`をx座標,`45+90*i`をy座標とすると配列を定義した時の位置と実際の盤面が一致します。\n\n#### Lesson: 関数（メソッド）\n\n関数（メソッド）は処理を一つの固まりにしたものです。例えばJavaScriptだと次のように書きます。\n\n```js\nfunction hoge() {\n}\n```\n\nこれは引数（ひきすう）と返り値（戻り値）が無い関数（メソッド）です。このステップではこれが使えれば十分です。  \n後々引数や返り値を使った関数も扱うことになりますが、詳しい解説は省くので各自どういうものなのか調べておきましょう。概念は知っていて、JavaScriptだけ知らない方のために両方を使う`add`関数を例としてあげておきます。\n\n```js\nfunction add(x, y) {\n  return x + y;\n}\n```\n\n#### Lesson: 配列の長さをとる\n\n今回の課題の場合、扱う配列の長さが決まっているため本当は必要ないものなのですが後々のために覚えておきましょう。  \n配列の長さは\n\n```js\nvar array = [1, 2, 3, 4];\nconsole.log(array.length);  // arrayの長さが表示される\n```\n\nで取得できます。これは多次元配列の中に入っているものも同様で今回の場合で言うと`board.length`が`board`の中に入っている配列の数になり、`board[i].length`とすると`board`の中のi番目の配列に入っている要素の数になります。  \n盤面全てを確認するにはこれを用いてfor文を入れ子にして使うと良いです。この時for文に使う変数を`x`,`y`などとすると実際の感覚とやってることがずれたりするので注意しましょう。\n\n### ②最初の盤面を描画しよう\n\n準備は整ったと思うので`pieces`を描画してみましょう。自分の考えた通りの初期状態ができたでしょうか？出来ていない場合は質問しましょう。\n\n以上で基本編は終了です。以下の具体的な部分はやり方によって変わってくるので出来る人は以下のステップを踏まず自分で進めてみることをおすすめします。\n\n## 課題３ 実際のオセロの処理を書いてみよう\n### ①ボタンをおした時にコマを置けるようにしてみよう\n\n`whichGridPressed(mx, my)`という関数を作成してマウスでクリックされた時に呼び出されるようにしましょう。p5.js/p5.play.jsには様々なマウスのイベントを拾う関数が用意されているかと思いますが、今回は一回のクリックで一回だけ実行したいので`mouseWentUp(LEFT)`を使うといいと思います。  \n`whichGridPressed`の`mx`と`my`はマウスの押した座標を渡す引数です。マウスクリックした時のマウスの位置をわたしてあげてください。\n\n#### Lesson: 関数を呼び出す\n\nこれはすでにp5.play.jsの関数群を呼び出す時に何度も行っていることだと思いますが改めて確認しましょう。  \n今回の作業のほぼ答えとなりますが、例えば`whichGridPressed`を呼び出す際は以下のようになります。\n\n```js\nwhichGridPressed(mouseX, mouseY);\n```\n\nこのように引数を渡す際はカンマ区切りで丸括弧の中に渡したいものを入れることで呼び出せます。\n\n#### Lesson: 論理式\n\nクリックされた場所がどのマスにあたるかを判定するにあたって、for文とif文で書くことになると思いますが何も知らずに書くと条件が多いのでどんどんif文が深くなっていくと思います。  \nこれはコードが汚いというのもありますがなによりわかりにくいコードになってしまいます。そこでJavaScriptを始めとした多くの言語には日本語の「かつ」や「または」に対応する記号が用意されています。例えば2の倍数かつ3の倍数というのをJavaScriptで書くと\n\n```js\nif (num % 2 == 0 && num % 3 == 0) {}\n```\n\nというようになります。またはの場合は`&&`ではなく`||`です。上手く用いてきちんとクリックした位置とマスの番号が対応するよう判定してみましょう。\n\n#### Lesson: ループの中断\n\nループの中断にはいくつか種類があります。今回使わないものもありますが後々便利なので見ていきましょう。  \nまずは`break`文です。これは以降のループをやめて途中でループから抜け出てくる時に使います。ただし抜けられるのはループ一個だけです。たとえば以下のコードを実行してみましょう。\n\n```js\nfor (var i = 0; i < 5; i++) {\n  for (var j = 0; j < 5; j++) {\n    if (i * j > 10) {\n      break;\n    }\n    console.log(i * j);\n  }\n}\n```\n\nすると以下のような結果が得られると思います。\n\n```\n> 0\n> 0\n> 0\n> 0\n> 0\n> 0\n> 1\n> 2\n> 3\n> 4\n> 0\n> 2\n> 4\n> 8\n> 0\n> 3\n> 6\n> 9\n> 0\n> 4\n> 8\n```\n\nこのように`i*j`を出力するのですが、10より大きいものは表示されてません。これは10より大きくなった時にbreak文で内側のfor文を抜けているからです。\n\n似たようなものに`continue`文というものがあります。これはループ自体は抜け出さずループの中の以降の処理を無視して次の繰り返しにうつるというものです。つまり以下のように書くと2の倍数のみが表示されます。\n\n```js\nfor (var i = 0; i < 100; i++) {\n  if (i % 2 != 0) {\n    continue;\n  }\n  console.log(i);\n}\n```\n\n最後に紹介するのは`return`文によるものです。これは関数自体から抜けてしまうので限られたシチュエーションでしかつかえませんが今回のように関数にまとめておけば非常に有用な手段になります。  \n`return`文はこのように返り値を返すだけではなく単純に関数から抜けるためにも使えるということを覚えておきましょう。\n\n#### Lesson: 【発展】三項演算子\n\n今回、僕の設定にあわせて作ってきた方はターンを切り替える時に単純な算術演算で表すことが出来ないので、if文でかくことになると思います。この時に三項演算子というのを代わりに使うと一行で全てが書けるので興味のある人は覚えておきましょう。  \n具体的には\n\n```\n条件 ? 返り値A : 返り値B;\n```\n\nというものです。条件が真なら返り値Aを返し、偽なら返り値Bを返します。ちょっと変わった関数と思ってもらって問題ありません。\n\n終わったら実行してみましょう。押した場所が今のターンのコマの画像に切り替わったでしょうか？ですが現状だと本来置いてはいけない所にも置けてしまいます。ですからこれを直していきましょう。\n\n### ②コマがおけるかどうかを判断し、ついでにひっくり返してしまおう\n\nこっからは一気に進めます。用意するのは以下のような関数たちです。\n\n- `canPut(y, x)` ... `board[y][x]`にコマが置けるか判断し置けるならひっくり返るところをひっくり返す\n- `checkFlip(y, x, vnum)` ... `board[y][x]`から`vec[vnum]`方向にひっくり返るこまがあるか確認する\n- `flip(y, x, vnum)` ... `board[y][x]`から`vec[vnum]`方向を実際にひっくり返していく\n\n具体的なアルゴリズムはC言語やそれに類する言語が読める人は[ここ](http://idehideout.fc2web.com/p/rev/src/06.html)を参考にすると関数の使い方や名前が大体一致していると思うのでわかりやすいと思います。`vec`がよくわからない人はこの記事の末尾にあるおまけからコピペして構いません。\n\n#### Lesson: 無限ループ\n\n無限ループは処理をしっかり止めるものが入っていないと永遠に実行され続けるのであまり使われることはないのですが、今回は利用しています。同じようなことは再帰関数というものを使っても実現可能ですがこちらは少し理解するのが難しいものなので興味のある人は調べて書き直してみてください。  \nJavaScriptにも様々な無限ループの実現方法はあるかとは思いますが今回は一番単純なものを紹介しておきます。\n\n```js\nwhile (true) {\n}\n```\n\nこれで無限ループとなります。書いたら実行する前にかならず`break`や`continue`、`return`によっていつか必ず止まることを確認するようにしてください。万が一実行してしまった場合は強制的にでもすぐ終了することを強く勧めます。\n\n## 完成！\n\n冒頭にのせたGIF画像のような動きが実現できていたら完成です！  \n発展事項として\n\n- 盤面のマス目を増やしてみる（画像を自分で用意してもいいですし、Spriteで盤面を描くようにしてもいいかもしれません）\n- 再帰関数版など色んな書き方で同じものを作ってみる\n- 画像を入れ替えてオリジナル化してみる\n- GIFやp5.play.jsの機能でアニメーションをつくってコマがひっくり返る演出をつけてみる\n- etc...\n\nなどがあげられると思うのでレベルアップしたい方は是非挑戦してみてください！\n\n### おまけ\n\n今回使用した`vec`の定義を載せておきます。\n\n```js\nvec = [[1,0], [-1,0],\n       [1,1], [-1,1], [0,1],\n       [1,-1], [-1,-1], [0,-1]]\n```";
}
