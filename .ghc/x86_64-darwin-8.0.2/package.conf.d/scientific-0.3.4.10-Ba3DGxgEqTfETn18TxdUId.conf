name: scientific
version: 0.3.4.10
id: scientific-0.3.4.10-Ba3DGxgEqTfETn18TxdUId
key: scientific-0.3.4.10-Ba3DGxgEqTfETn18TxdUId
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
abi: 5a6fdd74fb06958936a15eab5f8bc404
trusted: False
import-dirs: /Users/touyou/.cabal/lib/x86_64-osx-ghc-8.0.2/scien_0aejDdiHcDLFL3bPjnpUmM
library-dirs: /Users/touyou/.cabal/lib/x86_64-osx-ghc-8.0.2/scien_0aejDdiHcDLFL3bPjnpUmM
dynamic-library-dirs: /Users/touyou/.cabal/lib/x86_64-osx-ghc-8.0.2
data-dir: /Users/touyou/.cabal/share/x86_64-osx-ghc-8.0.2/scientific-0.3.4.10
hs-libraries: HSscientific-0.3.4.10-Ba3DGxgEqTfETn18TxdUId
depends:
    base-4.9.1.0 binary-0.8.3.0 bytestring-0.10.8.1 containers-0.5.7.1
    deepseq-1.4.2.0 ghc-prim-0.5.0.0
    hashable-1.2.5.0-D2qhjboTBST6rFOSUg03ZP integer-gmp-1.0.0.1
    integer-logarithms-1.0.1-41Vx8Gc1I6fAYpZXPW8o2w
    text-1.2.2.1-FeA6fTH3E2n883cNXIS2Li
    vector-0.12.0.0-900owgCX5Pn3WXzaAvmVao
haddock-interfaces: /Users/touyou/.cabal/share/doc/x86_64-osx-ghc-8.0.2/scientific-0.3.4.10/html/scientific.haddock
haddock-html: /Users/touyou/.cabal/share/doc/x86_64-osx-ghc-8.0.2/scientific-0.3.4.10/html
